"use strict";(self.webpackChunkgreenfield_js_sdk_docs=self.webpackChunkgreenfield_js_sdk_docs||[]).push([[907],{4852:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(9231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,y=u["".concat(l,".").concat(d)]||u[d]||f[d]||i;return n?r.createElement(y,a(a({ref:t},p),{},{components:n})):r.createElement(y,a({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},452:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(6e3),o=(n(9231),n(4852));const i={id:"pagination",title:"Pagination"},a=void 0,s={unversionedId:"types/pagination",id:"types/pagination",title:"Pagination",description:"PageRequest is to be embedded in gRPC request messages for efficient.",source:"@site/docs/types/pagination.mdx",sourceDirName:"types",slug:"/types/pagination",permalink:"/greenfield-js-sdk/types/pagination",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-js-sdk/tree/docs_sit/doc-site/docs/types/pagination.mdx",tags:[],version:"current",frontMatter:{id:"pagination",title:"Pagination"},sidebar:"GettingStartSidebar",previous:{title:"Coin",permalink:"/greenfield-js-sdk/types/coin"},next:{title:"PrincipalType",permalink:"/greenfield-js-sdk/types/principal"}},l={},c=[],p={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"PageRequest is to be embedded in gRPC request messages for efficient."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export interface PageRequest {\n  /**\n   * key is a value returned in PageResponse.next_key to begin\n   * querying the next page most efficiently. Only one of offset or key\n   * should be set.\n   */\n  key: Uint8Array;\n  /**\n   * offset is a numeric offset that can be used when key is unavailable.\n   * It is less efficient than using key. Only one of offset or key should\n   * be set.\n   */\n  offset: Long;\n  /**\n   * limit is the total number of results to be returned in the result page.\n   * If left empty it will default to a value to be set by each app.\n   */\n  limit: Long;\n  /**\n   * count_total is set to true  to indicate that the result set should include\n   * a count of the total number of items available for pagination in UIs.\n   * count_total is only respected when offset is used. It is ignored when key\n   * is set.\n   */\n  countTotal: boolean;\n  /**\n   * reverse is set to true if results are to be returned in the descending order.\n   *\n   * Since: cosmos-sdk 0.43\n   */\n  reverse: boolean;\n}\n")))}f.isMDXComponent=!0}}]);